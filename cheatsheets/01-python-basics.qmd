---
title: "Python Basics â€” 6 protipÃ³w"
format:
  html:
    code-tools: true
---

## 1) `enumerate` â€” numeruj elementy w pÄ™tli
```{python}
#| classes: thebe
fruits = ["apple", "banana", "cherry"]
for i, f in enumerate(fruits, start=1):
    print(i, f)
```

**Dlaczego warto:** zamiast rÄ™cznie liczyÄ‡ indeksy.

---

## 2) `zip` â€” paruj listy w locie
```{python}
#| classes: thebe
names = ["Ala", "Bartek", "Cezary"]
scores = [84, 92, 78]
for name, score in zip(names, scores):
    print(f"{name}: {score}")
```

**Protip:** `list(zip(names, scores))` da listÄ™ krotek.

---

## 3) List Comprehension â€” szybko twÃ³rz listy
```{python}
#| classes: thebe
nums = [1, 2, 3, 4, 5]
squares_even = [x*x for x in nums if x % 2 == 0]
squares_even
```

---

### Mini-zadanie âœ…
Wygeneruj listÄ™ **dÅ‚ugoÅ›ci** kaÅ¼dego napisu w `fruits`, ale **tylko** dla owocÃ³w o nazwie dÅ‚uÅ¼szej niÅ¼ 5 znakÃ³w.

```{python}
#| classes: thebe
# TODO: uzupeÅ‚nij list comprehension
fruits = ["apple", "banana", "cherry", "kiwi"]
# lengths = [...]
# lengths
```

---

## 4) Dictionary Comprehension â€” buduj sÅ‚owniki efektywnie
```{python}
#| classes: thebe
products = ["laptop", "mouse", "keyboard", "monitor"]
prices = [2999, 59, 199, 899]
product_dict = {product: price for product, price in zip(products, prices) if price < 1000}
product_dict
```

**Protip:** MoÅ¼esz teÅ¼ tworzyÄ‡ sÅ‚owniki z warunkami: `{k: v for k, v in items if condition}`.

---

## 5) f-strings â€” formatuj stringi czytelnie
```{python}
#| classes: thebe
name = "Anna"
age = 25
score = 95.567
# Stary sposÃ³b
print("Nazywam siÄ™ " + name + ", mam " + str(age) + " lat")
# f-string way ğŸš€
print(f"Nazywam siÄ™ {name}, mam {age} lat i mÃ³j wynik to {score:.2f}")
```

**Dlaczego warto:** Czytelniejsze i szybsze niÅ¼ `.format()` czy konkatenacja.

---

## 6) `collections.Counter` â€” licz elementy automatycznie
```{python}
#| classes: thebe
from collections import Counter
grades = ["A", "B", "A", "C", "B", "A", "B", "C", "A"]
grade_counts = Counter(grades)
print(grade_counts)
print(f"NajczÄ™stsza ocena: {grade_counts.most_common(1)[0][0]}")
```

**Data Science tip:** Idealne do analizy czÄ™stoÅ›ci kategorii w danych!