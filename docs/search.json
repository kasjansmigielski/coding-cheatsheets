[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Witaj na stronie!",
    "section": "",
    "text": "Witaj w interaktywnej kolekcji ściąg z podstaw programowania! Znajdziesz tutaj krótkie, praktyczne protipsy z Pythona, Pandas i innych bibliotek, które pomogą Ci opanować najważniejsze techniki programistyczne.\n\n\n\n2-3 konkretne protipsy z wyjaśnieniami\nPraktyczne przykłady kodu gotowe do kopiowania\nMini-zadania do samodzielnego rozwiązania\nInteraktywny tryb edycji do eksperymentowania z kodem\n\n\n\n\nNa większości stron zobaczysz przycisk “Tryb Edycji” w prawym dolnym rogu. Po jego kliknięciu:\n\n🔄 Edytuj kod bezpośrednio w przeglądarce\n▶️ Uruchamiaj kod na żywo i zobacz wyniki\n🔄 Eksperymentuj bez obaw - zawsze możesz wrócić do oryginału\n📚 Ucz się przez praktykę - najlepszy sposób na naukę programowania!\n\n\n\n\n\n\n\nJak uruchomić tryb edycji?\n\n\n\n\nKliknij “✏️ Tryb Edycji” w prawym dolnym rogu\nPoczekaj aż Python się załaduje (około 10-15 sekund)\nModyfikuj kod i klikaj “▶️ Run” aby zobaczyć wyniki!\n\nUwaga: Przy pierwszym uruchomieniu Python i pandas ładują się z internetu - to może potrwać chwilę.\n\n\n\n\n\n\n\n\nPython Basics - Zmienne, listy, pętle i funkcje\n\n\n\n\n\nPandas Filtering - Filtrowanie i selekcja danych\n\n\n\n\n\n\n\n💡 Więcej ściąg wkrótce!\n\n\n\nTa kolekcja będzie się rozrastać o nowe biblioteki i zaawansowane techniki. Śledź aktualizacje!\n\n\n\n\n\n\n\nWybierz ściągę z listy powyżej\nPrzeczytaj protipsy i spróbuj zrozumieć przykłady\n\nSkopiuj kod (ikona Copy w prawym górnym rogu bloku)\nEksperymentuj używając trybu edycji\nRozwiąż mini-zadanie na końcu każdej strony\n\n\nMiłej nauki! 🎓"
  },
  {
    "objectID": "index.html#co-znajdziesz-w-każdej-ściągawce",
    "href": "index.html#co-znajdziesz-w-każdej-ściągawce",
    "title": "Witaj na stronie!",
    "section": "",
    "text": "2-3 konkretne protipsy z wyjaśnieniami\nPraktyczne przykłady kodu gotowe do kopiowania\nMini-zadania do samodzielnego rozwiązania\nInteraktywny tryb edycji do eksperymentowania z kodem"
  },
  {
    "objectID": "index.html#tryb-edycji---twój-kod-na-żywo",
    "href": "index.html#tryb-edycji---twój-kod-na-żywo",
    "title": "Witaj na stronie!",
    "section": "",
    "text": "Na większości stron zobaczysz przycisk “Tryb Edycji” w prawym dolnym rogu. Po jego kliknięciu:\n\n🔄 Edytuj kod bezpośrednio w przeglądarce\n▶️ Uruchamiaj kod na żywo i zobacz wyniki\n🔄 Eksperymentuj bez obaw - zawsze możesz wrócić do oryginału\n📚 Ucz się przez praktykę - najlepszy sposób na naukę programowania!\n\n\n\n\n\n\n\nJak uruchomić tryb edycji?\n\n\n\n\nKliknij “✏️ Tryb Edycji” w prawym dolnym rogu\nPoczekaj aż Python się załaduje (około 10-15 sekund)\nModyfikuj kod i klikaj “▶️ Run” aby zobaczyć wyniki!\n\nUwaga: Przy pierwszym uruchomieniu Python i pandas ładują się z internetu - to może potrwać chwilę."
  },
  {
    "objectID": "index.html#dostępne-ściągi",
    "href": "index.html#dostępne-ściągi",
    "title": "Witaj na stronie!",
    "section": "",
    "text": "Python Basics - Zmienne, listy, pętle i funkcje\n\n\n\n\n\nPandas Filtering - Filtrowanie i selekcja danych\n\n\n\n\n\n\n\n💡 Więcej ściąg wkrótce!\n\n\n\nTa kolekcja będzie się rozrastać o nowe biblioteki i zaawansowane techniki. Śledź aktualizacje!"
  },
  {
    "objectID": "index.html#szybki-start",
    "href": "index.html#szybki-start",
    "title": "Witaj na stronie!",
    "section": "",
    "text": "Wybierz ściągę z listy powyżej\nPrzeczytaj protipsy i spróbuj zrozumieć przykłady\n\nSkopiuj kod (ikona Copy w prawym górnym rogu bloku)\nEksperymentuj używając trybu edycji\nRozwiąż mini-zadanie na końcu każdej strony\n\n\nMiłej nauki! 🎓"
  },
  {
    "objectID": "cheatsheets/02-pandas-filtering.html",
    "href": "cheatsheets/02-pandas-filtering.html",
    "title": "Pandas — filtrowanie trzema sposobami",
    "section": "",
    "text": "Załóżmy prosty DataFrame:\nimport pandas as pd\n\ndf = pd.DataFrame({\n    \"city\": [\"WAW\",\"WRO\",\"KRK\",\"GDA\",\"POZ\"],\n    \"temp\": [23, 25, 21, 19, 24],\n    \"rain\": [False, True, False, True, False]\n})\ndf\n\n\n\n\n\n\n\n\ncity\ntemp\nrain\n\n\n\n\n0\nWAW\n23\nFalse\n\n\n1\nWRO\n25\nTrue\n\n\n2\nKRK\n21\nFalse\n\n\n3\nGDA\n19\nTrue\n\n\n4\nPOZ\n24\nFalse"
  },
  {
    "objectID": "cheatsheets/02-pandas-filtering.html#filtrowanie-maską-bool-najczęstsze",
    "href": "cheatsheets/02-pandas-filtering.html#filtrowanie-maską-bool-najczęstsze",
    "title": "Pandas — filtrowanie trzema sposobami",
    "section": "1) Filtrowanie maską bool (najczęstsze)",
    "text": "1) Filtrowanie maską bool (najczęstsze)\n\nhot = df[\"temp\"] &gt;= 23\ndf[hot]\n\n\n\n\n\n\n\n\ncity\ntemp\nrain\n\n\n\n\n0\nWAW\n23\nFalse\n\n\n1\nWRO\n25\nTrue\n\n\n4\nPOZ\n24\nFalse"
  },
  {
    "objectID": "cheatsheets/02-pandas-filtering.html#query-czytelne-warunki-jako-string",
    "href": "cheatsheets/02-pandas-filtering.html#query-czytelne-warunki-jako-string",
    "title": "Pandas — filtrowanie trzema sposobami",
    "section": "2) .query() — czytelne warunki jako string",
    "text": "2) .query() — czytelne warunki jako string\n\ndf.query(\"temp &gt;= 23 and rain == False\")\n\n\n\n\n\n\n\n\ncity\ntemp\nrain\n\n\n\n\n0\nWAW\n23\nFalse\n\n\n4\nPOZ\n24\nFalse"
  },
  {
    "objectID": "cheatsheets/02-pandas-filtering.html#loc-jawnie-po-wierszachkolumnach",
    "href": "cheatsheets/02-pandas-filtering.html#loc-jawnie-po-wierszachkolumnach",
    "title": "Pandas — filtrowanie trzema sposobami",
    "section": "3) .loc — jawnie po wierszach/kolumnach",
    "text": "3) .loc — jawnie po wierszach/kolumnach\n\ndf.loc[df[\"temp\"].ge(23) & ~df[\"rain\"], [\"city\", \"temp\"]]\n\n\n\n\n\n\n\n\ncity\ntemp\n\n\n\n\n0\nWAW\n23\n\n\n4\nPOZ\n24\n\n\n\n\n\n\n\n\n\nMini-zadanie ✅\nWyfiltruj miasta, w których nie pada i temperatura jest poniżej 24, zwracając tylko kolumny city i temp.\n\n# TODO: napisz filtr na 2 różne sposoby (maską i .query())\n# 1) maska bool:\n# ...\n\n# 2) query():\n# ..."
  },
  {
    "objectID": "cheatsheets/01-python-basics.html",
    "href": "cheatsheets/01-python-basics.html",
    "title": "Python Basics — 9 protipów",
    "section": "",
    "text": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor i, f in enumerate(fruits, start=1):\n    print(i, f)\n\n1 apple\n2 banana\n3 cherry\n\n\nDlaczego warto: zamiast ręcznie liczyć indeksy."
  },
  {
    "objectID": "cheatsheets/01-python-basics.html#enumerate-numeruj-elementy-w-pętli",
    "href": "cheatsheets/01-python-basics.html#enumerate-numeruj-elementy-w-pętli",
    "title": "Python Basics — 9 protipów",
    "section": "",
    "text": "fruits = [\"apple\", \"banana\", \"cherry\"]\nfor i, f in enumerate(fruits, start=1):\n    print(i, f)\n\n1 apple\n2 banana\n3 cherry\n\n\nDlaczego warto: zamiast ręcznie liczyć indeksy."
  },
  {
    "objectID": "cheatsheets/01-python-basics.html#zip-paruj-listy-w-locie",
    "href": "cheatsheets/01-python-basics.html#zip-paruj-listy-w-locie",
    "title": "Python Basics — 9 protipów",
    "section": "2) zip — paruj listy w locie",
    "text": "2) zip — paruj listy w locie\n\nnames = [\"Ala\", \"Bartek\", \"Cezary\"]\nscores = [84, 92, 78]\nfor name, score in zip(names, scores):\n    print(f\"{name}: {score}\")\n\nAla: 84\nBartek: 92\nCezary: 78\n\n\nProtip: list(zip(names, scores)) da listę krotek."
  },
  {
    "objectID": "cheatsheets/01-python-basics.html#list-comprehension-szybko-twórz-listy",
    "href": "cheatsheets/01-python-basics.html#list-comprehension-szybko-twórz-listy",
    "title": "Python Basics — 9 protipów",
    "section": "3) List Comprehension — szybko twórz listy",
    "text": "3) List Comprehension — szybko twórz listy\n\nnums = [1, 2, 3, 4, 5]\nsquares_even = [x*x for x in nums if x % 2 == 0]\nsquares_even\n\n[4, 16]\n\n\n\n\nMini-zadanie ✅\nWygeneruj listę długości każdego napisu w fruits, ale tylko dla owoców o nazwie dłuższej niż 5 znaków.\n\n# TODO: uzupełnij list comprehension\nfruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\"]\n# lengths = [...]\n# lengths"
  },
  {
    "objectID": "cheatsheets/01-python-basics.html#dictionary-comprehension-buduj-słowniki-efektywnie",
    "href": "cheatsheets/01-python-basics.html#dictionary-comprehension-buduj-słowniki-efektywnie",
    "title": "Python Basics — 9 protipów",
    "section": "4) Dictionary Comprehension — buduj słowniki efektywnie",
    "text": "4) Dictionary Comprehension — buduj słowniki efektywnie\n\nproducts = [\"laptop\", \"mouse\", \"keyboard\", \"monitor\"]\nprices = [2999, 59, 199, 899]\nproduct_dict = {product: price for product, price in zip(products, prices) if price &lt; 1000}\nproduct_dict\n\n{'mouse': 59, 'keyboard': 199, 'monitor': 899}\n\n\nProtip: Możesz też tworzyć słowniki z warunkami: {k: v for k, v in items if condition}."
  },
  {
    "objectID": "cheatsheets/01-python-basics.html#f-strings-formatuj-stringi-czytelnie",
    "href": "cheatsheets/01-python-basics.html#f-strings-formatuj-stringi-czytelnie",
    "title": "Python Basics — 9 protipów",
    "section": "5) f-strings — formatuj stringi czytelnie",
    "text": "5) f-strings — formatuj stringi czytelnie\n\nname = \"Anna\"\nage = 25\nscore = 95.567\n# Stary sposób\nprint(\"Nazywam się \" + name + \", mam \" + str(age) + \" lat\")\n# f-string way 🚀\nprint(f\"Nazywam się {name}, mam {age} lat i mój wynik to {score:.2f}\")\n\nNazywam się Anna, mam 25 lat\nNazywam się Anna, mam 25 lat i mój wynik to 95.57\n\n\nDlaczego warto: Czytelniejsze i szybsze niż .format() czy konkatenacja."
  },
  {
    "objectID": "cheatsheets/01-python-basics.html#collections.counter-licz-elementy-automatycznie",
    "href": "cheatsheets/01-python-basics.html#collections.counter-licz-elementy-automatycznie",
    "title": "Python Basics — 9 protipów",
    "section": "6) collections.Counter — licz elementy automatycznie",
    "text": "6) collections.Counter — licz elementy automatycznie\n\nfrom collections import Counter\ngrades = [\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"B\", \"C\", \"A\"]\ngrade_counts = Counter(grades)\nprint(grade_counts)\nprint(f\"Najczęstsza ocena: {grade_counts.most_common(1)[0][0]}\")\n\nCounter({'A': 4, 'B': 3, 'C': 2})\nNajczęstsza ocena: A\n\n\nData Science tip: Idealne do analizy częstości kategorii w danych!"
  },
  {
    "objectID": "cheatsheets/01-python-basics.html#args-i-kwargs-elastyczne-funkcje",
    "href": "cheatsheets/01-python-basics.html#args-i-kwargs-elastyczne-funkcje",
    "title": "Python Basics — 9 protipów",
    "section": "7) *args i **kwargs — elastyczne funkcje",
    "text": "7) *args i **kwargs — elastyczne funkcje\n\ndef smart_print(*args, **kwargs):\n    separator = kwargs.get('sep', ' | ')\n    prefix = kwargs.get('prefix', '&gt;&gt;&gt; ')\n    print(prefix + separator.join(str(arg) for arg in args))\n\n# Różne sposoby wywołania\nsmart_print(\"Python\", \"jest\", \"super\")\nsmart_print(\"A\", \"B\", \"C\", sep=\" -&gt; \", prefix=\"WYNIK: \")\nsmart_print(1, 2, 3, 4, 5, sep=\", \")\n\n&gt;&gt;&gt; Python | jest | super\nWYNIK: A -&gt; B -&gt; C\n&gt;&gt;&gt; 1, 2, 3, 4, 5\n\n\nDlaczego warto: Funkcje mogą przyjmować dowolną liczbę argumentów pozycyjnych (*args) i nazwanych (**kwargs)."
  },
  {
    "objectID": "cheatsheets/01-python-basics.html#defaultdict-słowniki-z-domyślnymi-wartościami",
    "href": "cheatsheets/01-python-basics.html#defaultdict-słowniki-z-domyślnymi-wartościami",
    "title": "Python Basics — 9 protipów",
    "section": "8) defaultdict — słowniki z domyślnymi wartościami",
    "text": "8) defaultdict — słowniki z domyślnymi wartościami\n\nfrom collections import defaultdict\n\n# Standardowy słownik - trzeba sprawdzać klucze\nnormal_dict = {}\n# if 'python' not in normal_dict:\n#     normal_dict['python'] = []\n# normal_dict['python'].append('awesome')\n\n# defaultdict - automatyczne wartości domyślne\ncourses = defaultdict(list)\ncourses['python'].append('basics')\ncourses['python'].append('advanced')\ncourses['javascript'].append('react')\n\nprint(dict(courses))  # Konwersja do normalnego dict dla czytelności\n\n{'python': ['basics', 'advanced'], 'javascript': ['react']}\n\n\nProtip: defaultdict(int) dla liczników, defaultdict(list) dla grup, defaultdict(set) dla unikalnych wartości."
  },
  {
    "objectID": "cheatsheets/01-python-basics.html#any-i-all-sprawdzaj-warunki-w-kolekcjach",
    "href": "cheatsheets/01-python-basics.html#any-i-all-sprawdzaj-warunki-w-kolekcjach",
    "title": "Python Basics — 9 protipów",
    "section": "9) any() i all() — sprawdzaj warunki w kolekcjach",
    "text": "9) any() i all() — sprawdzaj warunki w kolekcjach\n\nnumbers = [2, 4, 6, 8, 10]\nmixed_numbers = [1, 2, 3, 4, 5]\nempty_list = []\n\n# Czy wszystkie elementy są parzyste?\nprint(f\"Wszystkie parzyste w {numbers}: {all(n % 2 == 0 for n in numbers)}\")\nprint(f\"Wszystkie parzyste w {mixed_numbers}: {all(n % 2 == 0 for n in mixed_numbers)}\")\n\n# Czy którykolwiek element jest większy niż 5?\nprint(f\"Jakiś &gt; 5 w {numbers}: {any(n &gt; 5 for n in numbers)}\")\nprint(f\"Jakiś &gt; 5 w {mixed_numbers}: {any(n &gt; 5 for n in mixed_numbers)}\")\n\n# Edge case - pusta lista\nprint(f\"all([]) = {all(empty_list)}\")  # True (bo nie ma elementów fałszywych)\nprint(f\"any([]) = {any(empty_list)}\")  # False (bo nie ma elementów prawdziwych)\n\nWszystkie parzyste w [2, 4, 6, 8, 10]: True\nWszystkie parzyste w [1, 2, 3, 4, 5]: False\nJakiś &gt; 5 w [2, 4, 6, 8, 10]: True\nJakiś &gt; 5 w [1, 2, 3, 4, 5]: False\nall([]) = True\nany([]) = False\n\n\nData Science tip: Świetne do walidacji danych - all(df['age'] &gt; 0) sprawdzi czy każdy wiek jest dodatni!\n\n\nFinalne wyzwanie 🏆\nStwórz funkcję analyze_grades(grades_list), która:\n\nPrzyjmuje listę ocen (stringi: “A”, “B”, “C”, “D”, “F”)\nZwraca słownik z informacjami:\n\ncounts: liczba każdej oceny (użyj Counter)\nhas_failing: czy są oceny F (użyj any())\nall_passing: czy wszystkie oceny to A-D (użyj all())\ntop_grade: najczęstsza ocena\n\n\n\nfrom collections import Counter\n\ndef analyze_grades(grades_list):\n    # TODO: Uzupełnij funkcję\n    # counts = ...\n    # has_failing = ...\n    # all_passing = ...\n    # top_grade = ...\n    # return {...}\n    pass\n\n# Test\ntest_grades = [\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"D\", \"C\", \"A\"]\n# result = analyze_grades(test_grades)\n# print(result)"
  },
  {
    "objectID": "cheatsheets/03-github-workflow.html",
    "href": "cheatsheets/03-github-workflow.html",
    "title": "GitHub Workflow - Wypychanie zmian",
    "section": "",
    "text": "Kompletny przewodnik po procesie wypychania zmian na GitHub - od klonowania repozytorium po wysłanie zmian na serwer."
  },
  {
    "objectID": "cheatsheets/03-github-workflow.html#wizualizacja-procesu",
    "href": "cheatsheets/03-github-workflow.html#wizualizacja-procesu",
    "title": "GitHub Workflow - Wypychanie zmian",
    "section": "🔄 Wizualizacja procesu",
    "text": "🔄 Wizualizacja procesu\nPoniższy diagram pokazuje kompletny workflow od sklonowania repozytorium do wypchania zmian:\n\nflowchart TD\n    A([Start]) --&gt; B[\"Otwórz VS Code / Cursor\"]\n    B --&gt; C[\"Otwórz folder roboczy lokalnie&lt;br/&gt;np. my_project\"]\n    C --&gt; D[\"Otwórz terminal i wpisz:&lt;br/&gt;git clone https://github.com/&lt;br/&gt;twoj-nick-github/twoja-nazwa-projektu\"]\n    D --&gt; E{Klonowanie udane?}\n    E --&gt;|Nie| X([Przerwij i daj znać mentorowi])\n    E --&gt;|Tak| F[\"Repo sklonowane lokalnie\"]\n    F --&gt; G[\"Sprawdź: git branch&lt;br/&gt;oraz git status\"]\n    G --&gt; H{Pracujesz nad&lt;br/&gt;nowym taskiem?}\n    H --&gt;|Tak| I[\"Utwórz gałąź:&lt;br/&gt;git checkout -b NAZWA_ZADANIA&lt;br/&gt;np. TASK-1-Kasjan\"]\n    H --&gt;|Nie| J[\"Zostań na gałęzi main\"]\n    I --&gt; K\n    J --&gt; K\n    K[\"Dodaj lub zmień pliki\"] --&gt; L[\"git status&lt;br/&gt;pliki na czerwono\"]\n    L --&gt; M[\"Dodaj do indeksu GitHub:&lt;br/&gt;git add .\"]\n    M --&gt; N[\"git status&lt;br/&gt;pliki na zielono\"]\n    N --&gt; O[\"Zatwierdź zmiany:&lt;br/&gt;git commit -m 'Opis zmian'\"]\n    O --&gt; P{Czy to nowa gałąź?}\n    P --&gt;|Tak| Q[\"git push -u origin&lt;br/&gt;NAZWA_GAŁĘZI\"]\n    P --&gt;|Nie| R[\"git push\"]\n    Q --&gt; S([Sprawdź pliki na GitHub])\n    R --&gt; S([Sprawdź pliki na GitHub])\n\n\n\n\nflowchart TD\n    A([Start]) --&gt; B[\"Otwórz VS Code / Cursor\"]\n    B --&gt; C[\"Otwórz folder roboczy lokalnie&lt;br/&gt;np. my_project\"]\n    C --&gt; D[\"Otwórz terminal i wpisz:&lt;br/&gt;git clone https://github.com/&lt;br/&gt;twoj-nick-github/twoja-nazwa-projektu\"]\n    D --&gt; E{Klonowanie udane?}\n    E --&gt;|Nie| X([Przerwij i daj znać mentorowi])\n    E --&gt;|Tak| F[\"Repo sklonowane lokalnie\"]\n    F --&gt; G[\"Sprawdź: git branch&lt;br/&gt;oraz git status\"]\n    G --&gt; H{Pracujesz nad&lt;br/&gt;nowym taskiem?}\n    H --&gt;|Tak| I[\"Utwórz gałąź:&lt;br/&gt;git checkout -b NAZWA_ZADANIA&lt;br/&gt;np. TASK-1-Kasjan\"]\n    H --&gt;|Nie| J[\"Zostań na gałęzi main\"]\n    I --&gt; K\n    J --&gt; K\n    K[\"Dodaj lub zmień pliki\"] --&gt; L[\"git status&lt;br/&gt;pliki na czerwono\"]\n    L --&gt; M[\"Dodaj do indeksu GitHub:&lt;br/&gt;git add .\"]\n    M --&gt; N[\"git status&lt;br/&gt;pliki na zielono\"]\n    N --&gt; O[\"Zatwierdź zmiany:&lt;br/&gt;git commit -m 'Opis zmian'\"]\n    O --&gt; P{Czy to nowa gałąź?}\n    P --&gt;|Tak| Q[\"git push -u origin&lt;br/&gt;NAZWA_GAŁĘZI\"]\n    P --&gt;|Nie| R[\"git push\"]\n    Q --&gt; S([Sprawdź pliki na GitHub])\n    R --&gt; S([Sprawdź pliki na GitHub])"
  },
  {
    "objectID": "cheatsheets/03-github-workflow.html#krok-po-kroku---wypychanie-zmian",
    "href": "cheatsheets/03-github-workflow.html#krok-po-kroku---wypychanie-zmian",
    "title": "GitHub Workflow - Wypychanie zmian",
    "section": "📝 Krok po kroku - wypychanie zmian",
    "text": "📝 Krok po kroku - wypychanie zmian\n\n1. Przygotowanie środowiska\nZanim zaczniesz pracować z repozytorium, upewnij się że:\n# Sprawdź czy masz zainstalowany Git\ngit --version\n\n# Skonfiguruj Git (tylko przy pierwszym użyciu)\ngit config --global user.name \"Twoje Imię Nazwisko\"\ngit config --global user.email \"twoj-email@example.com\"\n\n\n2. Klonowanie repozytorium\n# Sklonuj repozytorium z GitHub\ngit clone https://github.com/twoj-nick-github/twoja-nazwa-projektu.git\n\n# Przejdź do folderu projektu\ncd twoja-nazwa-projektu\n\n# Sprawdź status i dostępne gałęzie\ngit status\ngit branch -a\n\n\n3. Praca z gałęziami\n\nDla nowych zadań - utwórz nową gałąź:\n# Utwórz i przełącz się na nową gałąź\ngit checkout -b TASK-1-NazwaZadania\n\n# Sprawdź aktualną gałąź\ngit branch\n\n\nDla istniejącego kodu - zostań na main:\n# Upewnij się że jesteś na main\ngit checkout main\n\n# Pobierz najnowsze zmiany\ngit pull origin main\n🔥 Ważne!\n\nPrzystępując do pracy z kodem - zawsze pobierz najnowsze zmiany z repo\n\n\n\n\n4. Wprowadzanie zmian\nPo wprowadzeniu zmian w plikach:\n# Sprawdź które pliki zostały zmienione (czerwone = nieindeksowane)\ngit status\n\n# Dodaj wszystkie zmiany do indeksu\ngit add .\n\n# Sprawdź ponownie (zielone = gotowe do commit)\ngit status\n\n# Alternatywnie - dodaj konkretne pliki\ngit add nazwa-pliku.txt folder/inny-plik.py\n\n\n5. Zatwierdzanie zmian (commit)\n# Zatwierdź zmiany z opisem\ngit commit -m \"Dodano funkcję logowania użytkownika\"\n\n# Sprawdź historię commitów\ngit log --oneline\n💡 Dobre praktyki dla wiadomości commit:\n\nDo członków zespołu - pisz w trybie rozkazującym: “Dodaj”, “Napraw”, “Zaktualizuj”\nBądź konkretny: zamiast “poprawki” napisz “Napraw błąd walidacji email”\nOgranicz do 50 znaków w pierwszej linii\nNiech każdy opis commita będzie powiązany z faktyczną zmianą w kodzie\n\n\n\n6. Wypychanie na GitHub\n\nDla nowej gałęzi:\n# Wypchnij nową gałąź (z flagą -u dla upstream)\ngit push -u origin NAZWA_GALEZI\n\n# Przykład\ngit push -u origin TASK-1-LoginFunction\n\n\nDla istniejącej gałęzi:\n# Wypchnij zmiany\ngit push\n\n# Lub explicite\ngit push origin main\n\n\n\n7. Weryfikacja na GitHub\nPo wykonaniu git push:\n\nOtwórz repozytorium na GitHub.com\nSprawdź czy pliki zostały zaktualizowane\nDla nowej gałęzi: GitHub pokaże opcję “Compare & pull request”\nUtwórz Pull Request jeśli pracujesz w zespole"
  },
  {
    "objectID": "cheatsheets/03-github-workflow.html#najczęstsze-problemy-i-rozwiązania",
    "href": "cheatsheets/03-github-workflow.html#najczęstsze-problemy-i-rozwiązania",
    "title": "GitHub Workflow - Wypychanie zmian",
    "section": "⚠️ Najczęstsze problemy i rozwiązania",
    "text": "⚠️ Najczęstsze problemy i rozwiązania\n\nProblem: “Permission denied (publickey)”\n# Sprawdź czy masz skonfigurowany SSH key\nssh -T git@github.com\n\n# Lub użyj HTTPS zamiast SSH\ngit remote set-url origin https://github.com/username/repo.git\n\n\nProblem: “Your branch is behind”\n# Pobierz najnowsze zmiany\ngit pull origin main\n\n# Rozwiąż konflikty jeśli wystąpią\n# Następnie wykonaj commit i push\n\n\nProblem: Przypadkowy commit na main zamiast na feature branch\n# Cofnij ostatni commit (zachowaj zmiany)\ngit reset --soft HEAD~1\n\n# Utwórz nową gałąź\ngit checkout -b proper-feature-branch\n\n# Wykonaj commit ponownie\ngit commit -m \"Proper commit message\""
  },
  {
    "objectID": "cheatsheets/03-github-workflow.html#skróty-i-aliasy",
    "href": "cheatsheets/03-github-workflow.html#skróty-i-aliasy",
    "title": "GitHub Workflow - Wypychanie zmian",
    "section": "🚀 Skróty i aliasy",
    "text": "🚀 Skróty i aliasy\nDodaj te aliasy do ~/.gitconfig dla szybszej pracy:\n[alias]\n    st = status\n    co = checkout\n    br = branch\n    cm = commit -m\n    ps = push\n    pl = pull\n    lg = log --oneline --graph --decorate --all\nUżycie:\ngit st          # zamiast git status\ngit co main     # zamiast git checkout main\ngit cm \"Fix\"    # zamiast git commit -m \"Fix\""
  },
  {
    "objectID": "cheatsheets/03-github-workflow.html#następne-kroki",
    "href": "cheatsheets/03-github-workflow.html#następne-kroki",
    "title": "GitHub Workflow - Wypychanie zmian",
    "section": "📚 Następne kroki",
    "text": "📚 Następne kroki\nPo opanowaniu podstawowego workflow, warto nauczyć się:\n\nPull Requests - proces review kodu w zespole\nMerge vs Rebase - różne strategie łączenia gałęzi\nGit Flow - zaawansowany model pracy z gałęziami\nGitHub Actions - automatyzacja CI/CD\n\n\n💡 Protip: Zawsze sprawdź git status przed wykonaniem jakiejkolwiek operacji Git. To pomoże Ci uniknąć niespodzianek!"
  }
]